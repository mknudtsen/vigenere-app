{
    "collab_server" : "",
    "contents" : "library(plyr)\nlibrary(\"highcharter\")\nlibrary(shiny)\nsource(\"helpers.R\")\nsource(\"data/refs.R\")\n\n\nshinyServer(function(input, output, session) {\n  \n  v <- reactiveValues(key = \"\", encrypted = c(), decrypted = \"\")\n  \n  ############################################ ui outputs\n  \n  # slider input for letter position selection\n  output$letter_slider <- renderUI({\n    if (input$KL > 1) {\n      sliderInput(\"LET\", \"Letter Position\", min = 1, max = input$KL, value = 1, step = 1)\n    }\n  })\n\n  # chart output built with highcharts (js)\n  output$chart <- renderHighchart({\n    if(!is.null(input$LET)) {\n      reference_dist <- switch(input$ref, \n                               \"English literature classics\" = classics,\n                               \"Oxford dictionary\" = oxford)\n\n      txt <- input$enter\n      position_shift <- input$POS\n      key_length <- input$KL\n      letter_position <- input$LET\n      build_highchart(txt, reference_dist, key_length, position_shift, letter_position)\n    }\n  })\n  \n  # text output to display current key\n  output$key <- renderText({\n    v$key\n  })\n  \n  # text output to display current sample\n  output$sample <- renderText({\n    update_sample()\n  })\n\n  \n  ############################################ reactive functions\n  \n  # reactive to update the keyword based on current inputs\n  keyword <- reactive({\n    if(!is.null(input$LET) && input$KL >= input$LET) {\n      \n      key_length <- input$KL\n      letter_position <- input$LET\n      position_shift <- input$POS\n      \n      length(v$key) <- key_length\n      v$key[is.na(v$key)] <- \"-\"\n      v$key[[letter_position]] <- LETTERS[position_shift + 1]\n      return(v$key)\n      \n    }\n  })\n  \n  # reactive to update the sample text based on current inputs\n  update_sample <- reactive({\n    if(!is.null(input$LET) && input$KL >= input$LET) {\n      \n      key <- paste(keyword(), collapse = \"\")\n      key_length <- input$KL\n      letter_position <- input$LET\n      # sample_text used as reference to update copy stored in reactiveValues\n      sample_text <- substr(input$enter, 1, 20)\n      sample_ints <- str2ints(sample_text)\n      n <- length(sample_ints)\n      # get sequence of indices that need to be updated/decrypted according to current key\n      seq_idx <- seq(letter_position, n, key_length)\n      updates <- sample_ints[seq_idx]\n      \n      key_ints <- str2ints(key)\n      current_key <- rep(key_ints[letter_position], len = length(updates)) - 1\n      edits <- mod1(updates + (-1)*current_key, length(LETTERS))\n      v$encrypted[seq_idx] <- edits\n      \n      return(paste(LETTERS[v$encrypted], collapse = \"\"))\n      \n    }\n  })\n  \n  ############################################ observers to run reactives and change state\n  \n  observeEvent(input$enter, {\n    first_20 <- substr(input$enter, 1, 20)\n    v$encrypted <- str2ints(first_20)\n  })\n  \n  # control issues where keyword length slider input value < letter position slider input value\n  observe({\n    new_val <- input$KL\n    updateSliderInput(session, \"LET\", min = 1, max = new_val, value = 1)\n  })\n  \n  observeEvent(input$LET, {\n    new_letter_pos <- input$LET\n    key_letter <- v$key[[new_letter_pos]]\n    val <- str2ints(key_letter)\n    updateSliderInput(session, \"POS\", value = val - 1)\n    keyword()\n  })\n  \n  # output to show decrypted text up to 2000 characters -- ('decrypt text' panel)\n  output$decrypted <- renderText({\n    txt_sub <- substr(v$decrypted, 1, 2000)\n    txt_sub\n  })\n  \n  # observe action button to decrypt text -- ('decrypt text' panel)\n  observeEvent(input$decrypt, {\n    keyword <- isolate(input$key_input)\n    text <- isolate(input$enter)\n    decrypt <- vigen(input = text, key = keyword, decrypt = TRUE)\n    v$decrypted <- decrypt\n  })\n  \n})\n\n",
    "created" : 1458081508388.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1687277963",
    "id" : "7C21B7C3",
    "lastKnownWriteTime" : 1459737817,
    "last_content_update" : 0,
    "path" : "~/Development/susan/probability/vigenere_updated/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}