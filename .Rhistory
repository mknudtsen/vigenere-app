x
x[1]
x[[1]]
y <- list(a = 1, b = 2)
y
str(y[1])
str(y[[1]])
z <- factor(c("a", "b"))
z
z[1, drop = T]
a <- matrix(1:4, nrow = )
a <- matrix(1:4, nrow = 2)
a
a[1, , drop = FALSE]
a
a[1, ]
df <- data.frame(a = 1:2, b = 1:2)
df
str(df[1])
str(df[[1]])
str(df[, "a", drop = FALSE])
str(df[, "A"])
str(df[, "a"])
var <- "cyl"
mtcars$var
mtcars[[var]]
x <- 1:5
x
str(x)
typeof(x)
class(x)
x[x(1, 2)] <- 2:#
x[x(1, 2)] <- 2:3
x[x(1, 2)] <- 2:3
x <- 1:5
x
x(c(1, 2)) <- 2:3
x[c(1, 2)] <- 2:3
x
x[-1]
df <- data.frame(a = c(1, 10, NA))
df
df$a[df$a < 5] <- 0
df
x <- sample(10) < 4
x
which(x)
x1 <- 1:10 %% 2 == 0
x1
x2 <- which(x1)
x2
y1 <- 1:10 %% 5 == 0
y1
y2 <- which(y1)
y2
x1 & y1
?match
?with
?assign
?get
install.packages("pryr")
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
funs
funs()
funs
objs
funs <- Filter(is.function, objs)
funs
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
j(5)
k <- j(1)
k
k()
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
j()
add <- function(x, y) x + y
add(5, 2)
sapply(1:10, add, 3)
x <- list(1:3, 4:9, 10:12)
sapply(x, "[", 2)
`second<-` <- function(x, value) {
x[2] <- value
x
}
x <- 1:10
second(x, 5)
second(x)
`second<-` <- function(x, value) {
x[2] <- value
x
}
second
second(x) <- 5L
x
library(pryr)
?address
address(x)
second(x) <- 6L
address(X)
lapply(mtcars, function(x) sd(x) / mean(x))
mtcars
str(mtcars)
i <- 0
new_counter2 <- function() {}
new_counter2 <- function() {i <<- i + 1 i}
i <- 0
new_counter2 <- function() {
i <<- i + 1
i
}
new_counter2()
new_counter2()
new_counter2()
new_counter2()
new_counter2()
new_counter2()
new_counter2()
new_counter2()
i
new_counter3 <- function() {
i <- 0
function() {
i <- i + 1
i
}
}
new_counter3()
new_counter3()
counter2 <- new_counter2()
counter2
counter2
counter2
counter2
counter2
counter3 <- new_counter3
counter3 <- new_counter3()
counter3()
counter3
counter3()
counter3()
x <- 1:10
funs <- list(
sum = sum,
mean = mean,
median = median
)
lapply(funs, function(f) f(x))
?replicate
x <- "What is this?  It's an onion.  What! That's| Well Crazy."
x
strsplit(x, "(?<=[?.!|])", perl=TRUE)
strsplit(x, "")
x <- "underneath the blue cushion in the living room is a handfull of change and the remote control"
strsplit(x, "")
typeof(strsplit(x, ""))
sentence_list <- strsplit(x, "")
sentence_list
toupper(sentence_list)
sentence_list
shiny::runApp()
shiny::runApp()
shiny::runApp()
looking_encrypted <- vigen(looking_glass, key = "orange")
shiny::runApp()
vigen <- function(input, key, decrypt = F) {
input <- str2ints(input)
key <- rep(str2ints(key), len = length(input)) - 1
paste(collapse = "",
LETTERS[mod1(input + (if (decrypt) -1 else 1)*key, length(LETTERS))]
)
}
looking_encrypted <- vigen(looking_glass, key = "orange")
str2ints <- function(s) {
# input: character string (s)
# ouput: integer vector representing letters (position) from character string
as.integer(Filter(Negate(is.na),
factor(levels = LETTERS, strsplit(toupper(s), "")[[1]])))
}
str2ints <- function(s) {
# input: character string (s)
# ouput: integer vector representing letters (position) from character string
as.integer(Filter(Negate(is.na),
factor(levels = LETTERS, strsplit(toupper(s), "")[[1]])))
}
as.integer(Filter(Negate(is.na),
factor(levels = LETTERS, strsplit(toupper(s), "")[[1]])))
# helper functions
library(ggplot2)
library("highcharter")
sanitize <- function(str, keyl=1, let=1) {
# input: raw text string
# output: relative frequencies
str <- substr(str, 1, 30000)
newstr <- gsub("[^[:alpha:]]", "", str)
newstr <- tolower(newstr)
chars <- strsplit(newstr, NULL)[[1]]
nl <- length(chars)
seqind <- seq(let, nl, keyl)
freqs <- summary(factor(chars[seqind]))
rfreqs <- freqs/sum(freqs)
return(freqs)
}
fill_freqs <- function(freqs, pos = 0) {
# input: frequencies (not necessarily for all 26 letters)
# output: frequencies for all 26 letters
# moves over the frequencies by pos shift
# make 0-count vector
alphabet <- rep(1, 26)
names(alphabet) <- letters
# alphabet_filled <- sapply(1:26, function(x) {freqs[names(alphabet)[x]]})
alphabet_filled <- freqs[names(alphabet)]
alphabet_filled[is.na(alphabet_filled)] <- 0
names(alphabet_filled) <- letters
# move over the frequencies by pos
shiftedind <- ((1:26) + pos - 1) %% 26 + 1
alphabet_filled <- alphabet_filled[shiftedind]
names(alphabet_filled) <- letters
alphabet_filled <- as.data.frame(alphabet_filled)
names(alphabet_filled) <- "rfreqs"
return(alphabet_filled)
}
mod1 <- function(v, n) {
# mod1(1:20, 6) => 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2
((v - 1) %% n) + 1
}
str2ints <- function(s) {
# input: character string (s)
# ouput: integer vector representing letters (position) from character string
as.integer(Filter(Negate(is.na),
factor(levels = LETTERS, strsplit(toupper(s), "")[[1]])))
}
vigen <- function(input, key, decrypt = F) {
input <- str2ints(input)
key <- rep(str2ints(key), len = length(input)) - 1
paste(collapse = "",
LETTERS[mod1(input + (if (decrypt) -1 else 1)*key, length(LETTERS))]
)
}
# vigen_sample <- function(input, key, keyl = 1, let = 1) {
#   sample_ints <- str2ints(input)
#   n <- length(sample_ints)
#   key_ints <- str2ints(key)
#   seq_idx <- seq(let, n, keyl)
#   sample_updates <- sample_ints[seq_idx]
#   current_key <- rep(key_ints[let], len = length(sample_updates)) - 1
#   edits <- mod1(sample_updates + (-1)*current_key, length(LETTERS))
#   return(edits)
# }
fplot <- function(str, ref, keyl, pos, let) {
# input: raw text, array with reference frequencies
# output: plot
freqs <- sanitize(str,keyl,let)
rfreqs <- freqs/sum(freqs)
alphabet_filled_freqs <- fill_freqs(freqs,pos)
alphabet_filled_rfreqs <- fill_freqs(rfreqs,pos)
#   alphabet_filled_new <- merge(alphabet_filled_freqs,alphabet_filled_rfreqs,by=0,all=TRUE)
#   rownames(alphabet_filled_new) <- rownames(alphabet_filled_freqs)
#   colnames(alphabet_filled_new) <- c("Row.names", "freqs", "rfreqs")
if (ref[1] != "None") {
alphabet_filled_ref <- fill_freqs(ref,0)
hc <- highchart() %>%
hc_chart(type = "column",
animation = "false",
marginRight = "0") %>%
#       hc_title(
#         text = "Relative Frequencies",
#         align = "center"
#       ) %>%
hc_plotOptions(
column = list(
grouping = FALSE,
shadow = FALSE,
borderWidth = 0,
animation = FALSE
)) %>%
hc_yAxis(
visible = FALSE,
lineWidth = 0,
gridLineWidth = 0,
minorGridLineWidth = 0,
tickLength = 0,
tickWidth = 0
) %>%
hc_legend(
enabled = T,
align = "right",
verticalAlign = "top",
layout = "vertical"
) %>%
hc_tooltip(
enabled = T,
valueDecimals = 3
) %>%
hc_xAxis(categories = letters) %>%
hc_add_series(name = "Reference Distribution", color = "#9ecae1", data = alphabet_filled_ref$rfreqs, pointPadding = -0.1, pointPlacement = 0) %>%
hc_add_series(name = "Input Frequencies", color = "#3182bd", data = alphabet_filled_rfreqs$rfreqs, pointPadding = 0.2, pointPlacement = 0)
} else {
hc <- highchart() %>%
hc_chart(type = "column") %>%
hc_plotOptions(column = list(
grouping = FALSE,
shadow = FALSE,
borderWidth = 0
)) %>%
hc_xAxis(categories = letters) %>%
hc_add_series(data = alphabet_filled_rfreqs$rfreqs, pointPadding = 0.2, pointPlacement = 0)
}
hc
}
# hc <- highchart() %>%
#   hc_chart(type = "column") %>%
#   hc_plotOptions(column = list(
#     grouping = FALSE,
#     shadow = FALSE,
#     borderWidth = 0
#   )) %>%
#   hc_xAxis(categories = letters) %>%
#   hc_add_series(data = dat$rfreqs[dat$name == "ref"], pointPadding = -0.1, pointPlacement = 0) %>%
#   hc_add_series(data = dat$rfreqs[dat$name == "new"], pointPadding = 0.2, pointPlacement = 0)
# initial_text <- "Bfqjd gurjfnfm fsy fmf fmcpf; yafld vhmbjuz zfncqz cx vhmbjuz
# cs jnx pqs xud.Yafldubnoa bbm no wtozztcto cs ubj Pvqphxlsxâ€™ iizty.
# Yiy bjzj iui ecxdiaflje nmbn yiy mvmgbhi xux duwssnoa to us jhysclvy bjnm b
# Zwfhhi ansf, bii mbx gfys b atwywoyxt cs ubjjl kbgnms, fox xiy mbx fohtvhhfx
# yp bjs bztvfox yiuy tbj dizmx spn lp is mcajhl jh yiy xbgj iizty bjnm icr.
# Ubnt jttcyjis pz fgzfjlx iui oib muxuyi ubwfy ibsx, bhi oiy phqz nmf bztvfox
# fox bjzj ubjnmjmpjt, vzu uqm nmf gjnvjsm tg nmfcw gurjfd bhi iiztympfi,
# xywf jfjhkvfqz wtomhjizt ik jn."
#
looking_encrypted <- vigen(looking_glass, key = "orange")
#
looking_glass <- "One thing was certain, that the WHITE kitten had had nothing to do with
it:--it was the black kitten's fault entirely. For the white kitten had
been having its face washed by the old cat for the last quarter of
an hour (and bearing it pretty well, considering); so you see that it
COULDN'T have had any hand in the mischief.
The way Dinah washed her children's faces was this: first she held the
poor thing down by its ear with one paw, and then with the other paw she
rubbed its face all over, the wrong way, beginning at the nose: and
just now, as I said, she was hard at work on the white kitten, which was
lying quite still and trying to purr--no doubt feeling that it was all
meant for its good.
But the black kitten had been finished with earlier in the afternoon,
and so, while Alice was sitting curled up in a corner of the great
arm-chair, half talking to herself and half asleep, the kitten had been
having a grand game of romps with the ball of worsted Alice had been
trying to wind up, and had been rolling it up and down till it had all
come undone again; and there it was, spread over the hearth-rug, all
knots and tangles, with the kitten running after its own tail in the
middle.
'Oh, you wicked little thing!' cried Alice, catching up the kitten, and
giving it a little kiss to make it understand that it was in disgrace.
'Really, Dinah ought to have taught you better manners! You OUGHT,
Dinah, you know you ought!' she added, looking reproachfully at the old
cat, and speaking in as cross a voice as she could manage--and then she
scrambled back into the arm-chair, taking the kitten and the worsted
with her, and began winding up the ball again. But she didn't get on
very fast, as she was talking all the time, sometimes to the kitten, and
sometimes to herself. Kitty sat very demurely on her knee, pretending to
watch the progress of the winding, and now and then putting out one
paw and gently touching the ball, as if it would be glad to help, if it
might.
'Do you know what to-morrow is, Kitty?' Alice began. 'You'd have guessed
if you'd been up in the window with me--only Dinah was making you tidy,
so you couldn't. I was watching the boys getting in sticks for the
bonfire--and it wants plenty of sticks, Kitty! Only it got so cold, and
it snowed so, they had to leave off. Never mind, Kitty, we'll go and
see the bonfire to-morrow.' Here Alice wound two or three turns of the
worsted round the kitten's neck, just to see how it would look: this led
to a scramble, in which the ball rolled down upon the floor, and yards
and yards of it got unwound again.
'Do you know, I was so angry, Kitty,' Alice went on as soon as they were
comfortably settled again, 'when I saw all the mischief you had been
doing, I was very nearly opening the window, and putting you out into
the snow! And you'd have deserved it, you little mischievous darling!
What have you got to say for yourself? Now don't interrupt me!' she
went on, holding up one finger. 'I'm going to tell you all your faults.
Number one: you squeaked twice while Dinah was washing your face this
morning. Now you can't deny it, Kitty: I heard you! What's that you
say?' (pretending that the kitten was speaking.) 'Her paw went into your
eye? Well, that's YOUR fault, for keeping your eyes open--if you'd
shut them tight up, it wouldn't have happened. Now don't make any more
excuses, but listen! Number two: you pulled Snowdrop away by the tail
just as I had put down the saucer of milk before her! What, you were
thirsty, were you? How do you know she wasn't thirsty too? Now for
number three: you unwound every bit of the worsted while I wasn't
looking!
'That's three faults, Kitty, and you've not been punished for any of
them yet. You know I'm saving up all your punishments for Wednesday
week--Suppose they had saved up all MY punishments!' she went on,
talking more to herself than the kitten. 'What WOULD they do at the end
of a year? I should be sent to prison, I suppose, when the day came.
Or--let me see--suppose each punishment was to be going without a
dinner: then, when the miserable day came, I should have to go without
fifty dinners at once! Well, I shouldn't mind THAT much! I'd far rather
go without them than eat them!
'Do you hear the snow against the window-panes, Kitty? How nice and soft
it sounds! Just as if some one was kissing the window all over outside.
I wonder if the snow LOVES the trees and fields, that it kisses them so
gently? And then it covers them up snug, you know, with a white quilt;
and perhaps it says, Go to sleep, darlings, till the summer comes
again. And when they wake up in the summer, Kitty, they dress
themselves all in green, and dance about--whenever the wind blows--oh,
that's very pretty!' cried Alice, dropping the ball of worsted to clap
her hands. 'And I do so WISH it was true! I'm sure the woods look sleepy
in the autumn, when the leaves are getting brown.
'Kitty, can you play chess? Now, don't smile, my dear, I'm asking it
seriously. Because, when we were playing just now, you watched just as
if you understood it: and when I said Check! you purred! Well, it WAS
a nice check, Kitty, and really I might have won, if it hadn't been for
that nasty Knight, that came wiggling down among my pieces. Kitty, dear,
let's pretend--' And here I wish I could tell you half the things Alice
used to say, beginning with her favourite phrase 'Let's pretend.' She
had had quite a long argument with her sister only the day before--all
because Alice had begun with 'Let's pretend we're kings and queens;' and
her sister, who liked being very exact, had argued that they couldn't,
because there were only two of them, and Alice had been reduced at last
to say, 'Well, YOU can be one of them then, and I'LL be all the rest.'
And once she had really frightened her old nurse by shouting suddenly in
her ear, 'Nurse! Do let's pretend that I'm a hungry hyaena, and you're a
bone.'
But this is taking us away from Alice's speech to the kitten. 'Let's
pretend that you're the Red Queen, Kitty! Do you know, I think if you
sat up and folded your arms, you'd look exactly like her. Now do try,
there's a dear!' And Alice got the Red Queen off the table, and set it
up before the kitten as a model for it to imitate: however, the thing
didn't succeed, principally, Alice said, because the kitten wouldn't
fold its arms properly. So, to punish it, she held it up to the
Looking-glass, that it might see how sulky it was--'and if you're not
good directly,' she added, 'I'll put you through into Looking-glass
House. How would you like THAT?'"
looking_encrypted <- vigen(looking_glass, key = "orange")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?observeEvent
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
hc_chart(type = "column") %>%
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tickWidth = 0
shiny::runApp()
hc_add_series(name = "Reference Distribution", color = "rgba(165,170,217,1)", data = alphabet_filled_ref$rfreqs, pointPadding = -0.1, pointPlacement = 0) %>%
shiny::runApp()
shiny::runApp()
hc_add_series(name = "Reference Distribution", color = "rgba(223, 83, 83, .5)", data = alphabet_filled_ref$rfreqs, pointPadding = -0.1, pointPlacement = 0) %>%
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
